{"version":3,"sources":["Components/Buttons.js","Components/Input.js","Components/ClearText.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","_this","this","react_default","a","createElement","className","value","onClick","event","props","addToInput","handleEqual","React","Component","Input","input","ClearText","handleClear","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","console","log","target","setState","state","math","_this2","src_Components_Input","src_Components_Buttons","Components_ClearText","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6aaf3af8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Buttons.css';\r\n\r\n\r\n\r\nclass Buttons extends React.Component {\r\n    \r\n\r\n    render () {\r\n        return (\r\n            <div className=\"center\">\r\n    \r\n                <div className=''>\r\n                    <div className=''>\r\n                        <button className='pa3 ph4' value='7' onClick={((event) => this.props.addToInput(event))}>7</button>\r\n                        <button className='pa3 ph4' value='8' onClick={((event) => this.props.addToInput(event))}>8</button>\r\n                        <button className='pa3 ph4' value='9' onClick={((event) => this.props.addToInput(event))}>9</button>\r\n                        <button className='pa3 ph4 bg-light-blue' value='+' onClick={((event) => this.props.addToInput(event))}>+</button>\r\n                    </div>\r\n                    <div className=''>\r\n                        <button className='pa3 ph4' value='4' onClick={((event) => this.props.addToInput(event))}>4</button>\r\n                        <button className='pa3 ph4' value='5' onClick={((event) => this.props.addToInput(event))}>5</button>\r\n                        <button className='pa3 ph4' value='6' onClick={((event) => this.props.addToInput(event))}>6</button>\r\n                    <button className='pa3 ph4 bg-light-blue' value='-' onClick={((event) => this.props.addToInput(event))}>-</button>\r\n                    </div>\r\n                    <div>\r\n                        <button className=' pa3 ph4' value='3' onClick={((event) => this.props.addToInput(event))}>3</button>\r\n                        <button className=' pa3 ph4' value='2' onClick={((event) => this.props.addToInput(event))}>2</button>\r\n                        <button className=' pa3 ph4' value='1' onClick={((event) => this.props.addToInput(event))}>1</button>\r\n                        <button className=' pa3 ph4 bg-light-blue' value='*' onClick={((event) => this.props.addToInput(event))}>x</button>\r\n                    </div>\r\n                    <div>\r\n                        <button className=' pa3 ph4' value='.' onClick={((event) => this.props.addToInput(event))}>.</button>\r\n                        <button className=' pa3 ph4' value='0' onClick={((event) => this.props.addToInput(event))}>0</button>\r\n                        <button className=' pa3 ph4' value='=' onClick={this.props.handleEqual}>=</button>\r\n                        <button className=' pa3 ph4 bg-light-blue' value='/' onClick={((event) => this.props.addToInput(event))}>/</button>\r\n                    </div>\r\n                </div>\r\n           </div>    \r\n        )\r\n    }\r\n}\r\n\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport './Input.css'\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        \r\n        <div className=\"input center\">\r\n        {props.input}\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nclass ClearText extends React.Component {\r\n    render () {\r\n        return (\r\n            <div>\r\n                <button className='pa3 ph6 bg-light-blue' onClick={this.props.handleClear}>Clear</button>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ClearText;","import React from 'react';\nimport Buttons from './Components/Buttons';\nimport Input from './Components/Input';\nimport ClearText from './Components/ClearText';\nimport './App.css';\nimport 'tachyons';\nimport * as math from \"mathjs\";\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n      input: '',\n      /*  input1: '',\n        input2: '',\n        operator: '',\n        operatorPressed: false,\n        equalsTo: '',\n        result: 0 */\n    }\n  }\n\n\n\n  /* <Input displayText={this.state.input1 + ' ' +  this.state.operator + ' ' + this.state.input2\n   + ' ' + equalsTo + ' ' + result} */\n\n  addToInput = (value) => {\n    console.log(value.target.value);\n    this.setState({ input: this.state.input + value.target.value });\n  };\n\n  handleEqual = () => {\n    this.setState({ input: math.evaluate(this.state.input) });\n  };\n\n  render() {\n    return (\n\n\n      <div className=\"App\">\n        <h1 className='white'> CALCULATOR </h1>\n        <div className='br3 shadow-3'>\n          <Input input={this.state.input} />\n          <Buttons addToInput={this.addToInput} handleEqual={this.handleEqual} />\n          <ClearText handleClear={() => this.setState({ input: \"\" })} />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}